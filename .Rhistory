git add .
qurto publish netlify
quarto publish netlify
git add .
data.table::fread("tables/merged_results.txt") |>
knitr::kable() |>
kableExtra::row_spec(row = 2, bold = T)
data.table::fread("tables/merged_results.txt") |>
knitr::kable() |>
kableExtra::row_spec(row = 2, bold = T)
data.table::fread("tables/merged_results.txt")
data.table::fread("tables/merged_results.txt") |> knitr::kable(format = "html")
data.table::fread("tables/merged_results.txt") |>
knitr::kable(format = "html", col.names = c(letters[1:5]))
data.table::fread("tables/merged_results.txt") |>
knitr::kable(format = "html", col.names = c(letters[1:5]), align = "c")
data.table::fread("tables/merged_results.txt") |>
filter(n_snps != 1 & n_proteins != 2)
data.table::fread("tables/merged_results.txt") |>
filter(n_snps != 1 & n_proteins != 2)
data.table::fread("tables/merged_results.txt")
data.table::fread("tables/merged_results.txt") |> colnames()
data.table::fread("tables/merged_results.txt") |>
dplyr::filter(n_snps != 1 & n_proteins != 2)
data.table::fread("tables/merged_results.txt") |>
knitr::kable(format = "html", col.names = c(letters[1:5]), align = "c")
blogdown::build_site()
data.table::fread("tables/merged_results.txt") |>
knitr::kable()
75000000000
75000000000/4800
35000000000/4800
trial <- rbinom(n = 100, size = 1, prob = 0.8)
sum(trial)
trial <- rbinom(n = 100, size = 1, prob = 0.8)
sum(trial)
trial <- rbinom(n = 100, size = 1, prob = 0.8)
sum(trial)
trial <- c(rep(0, 20), rep(1, 80))
sum(trial)
hist(rbeta(n = 10000, shape1 = 4, shape2 = 2))
dens(rbeta(n = 10000, shape1 = 4, shape2 = 2))
density(rbeta(n = 10000, shape1 = 4, shape2 = 2))
plot(density(rbeta(n = 10000, shape1 = 4, shape2 = 2)))
plot(density(rbeta(n = 10000000, shape1 = 4, shape2 = 2)))
proder <- function(theta) {
dbinom(x = 80, size = 100, prob = 0.8) * dbeta(x = theta, shape1 = 4, shape2 = 2)
}
integrate(f = proder, lower = 0, upper = 1)
pacman::p_load(httr)
res <- GET("https://api.open-notify.org/astros.json")
res
res <- GET("www.ebi.ac.uk/traits/EFO_0003785/associations HTTP/1.1")
res <- GET("www.ebi.ac.uk/traits/EFO_0003785/associations")
res
res$url
res <- GET("www.ebi.ac.uk/gwas/summary-statistics/api/traits/")
res
res$headers
res$content
rawToChar(res$content)
pacman::p_load(httr, jsonlite)
fromJSON(rawToChar(res$content))
d <-fromJSON(rawToChar(res$content))
d$`_links`
d$`_embedded`
res <- GET("www.ebi.ac.uk/gwas/summary-statistics/api/traits/EFO_0001645")
res
d <-fromJSON(rawToChar(res$content))
d
res <- GET("www.ebi.ac.uk/gwas/summary-statistics/api/traits/EFO_0001645/studies")
res
d <-fromJSON(rawToChar(res$content))
d
names(d)
d$`_embedded`
ff <- function(theta) {
theta^2 * (1 - theta)^3
}
integrate(ff, 0, 1)
choose(5, 2) * integrate(ff, 0, 1)
choose(5, 2)
choose(5, 2) * integrate(ff, 0, 1)[1]
choose(5, 2) * integrate(ff, 0, 1)$value
pacman::p_load(tidyverse)
prior_prob <- function(q, p0, p12) {
p0^q * p12
}
tibble(p12 = seq(1e-8, 1e-4))
tibble(p12 = seq(1e-8, 1e-4), by = 1e-02)
tibble(p12 = seq(1e-8, 1e-4 , by = 1e-02))
tibble(p12 = seq(1e-8, 1e-4, length = 100))
prior_prob <- function(q, p0, p12) {
p0^(q-1) * p12
}
p0 <- 1 - 2*1e-4 - 1e-6
tibble(p12 = seq(1e-8, 1e-4, length = 100),
prob = prior_prob(50, p0, 1e-6))
tibble(p12 = seq(1e-8, 1e-4, length = 100),
prob = prior_prob(50, p0, 1e-6)) |>
ggplot(aes(x = p12, y = prob)) +
geom_line()
tibble(p12 = seq(1e-8, 1e-4, length = 100),
prob = prior_prob(50, p0, p12)) |>
ggplot(aes(x = p12, y = prob)) +
geom_line()
p0 <- 1 - 2*1e-04 - 1e-06
seq(1e-8, 1e-4, length = 100)
tibble(p12 = seq(1e-8, 1e-4, length = 100),
prob = prior_prob(50, p0, p12)) |>
ggplot(aes(x = factor(p12), y = prob)) +
geom_line()
tibble(p12 = seq(1e-8, 1e-4, length = 100),
prob = prior_prob(50, p0, p12)) |>
ggplot(aes(x = factor(p12), y = prob)) +
geom_point()
tibble(p12 = seq(1e-8, 1e-4, length = 200),
prob = prior_prob(50, p0, p12)) |>
ggplot(aes(x = factor(p12), y = prob)) +
geom_point()
replicate(n = 50, expr = p0^50 * 1e-6)
sum(replicate(n = 50, expr = p0^50 * 1e-6))
sum(replicate(n = 50, expr = p0^50 * 1e-6))/50
sum(replicate(n = 50, expr = p0^50))/50
1 - sum(replicate(n = 50, expr = p0^49 * 1e-06))/50
sum(replicate(n = 50, expr = p0^49 * 1e-06))/50
pacman::p_load(tidyverse, coloc)
coloc.abf
p0 <- 1 - 2*1e-04 - 1e-05
sum(replicate(n = 50, expr = p0^59))/50
data("coloc_test_data")
attach(coloc_test_data)
D1
sum(replicate(n = 50, expr = p0^59))/50
p0 <- 1 - 2*1e-04 - 1e-06
sum(replicate(n = 50, expr = p0^59))/50
sum(replicate(n = 50, expr = p0^50))/50
p0 <- 1 - 2*1e-04 - 1e-05
sum(replicate(n = 50, expr = p0^50))/50
sum(replicate(n = 100, expr = p0^100))/50
sum(replicate(n = 100, expr = p0^100))/100
p0 <- 1 - 2*1e-04 - 1e-06
sum(replicate(n = 100, expr = p0^100))/100
p0 <- 1 - 1e-04 -1e-04 - 1e-06
sum(replicate(n = 100, expr = p0^100))/100
sum(replicate(n = 50, expr = p0^50))/50
p0^50
p0^50
p0^48 * 1e-8
p0^49 * 1e-4
coloc
coloc.abf
coloc::process.dataset
process.dataset
50 * 1e-04
50*49*1e-8
geo_ser <- function(r, n) {
if (n > 10000) {return(1/(1 - r))}
return((1 - r^n)/(1 - r))
}
geo_ser(p0, 50)
geo_ser(p0, 50)/50
geo_ser(p0, 500)/500
p0^50
pacman::p_load(tidyverse, coloc)
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
rgamma(n = 1, shape = alpha, scale = 1)
}
rdir(4)
c(rdir(4), rdir(1), rdir(1), rdir(0.5))
y <- c(rdir(4), rdir(1), rdir(1), rdir(0.5))
x <-y/sum(x)
y <- c(rdir(4), rdir(1), rdir(1), rdir(0.5))
x <-y/sum(y)
x
rgamma(n = 4, shape = c(4, 2, 2, 1), scale = 1)
y <- rgamma(n = 4, shape = c(4, 2, 2, 1), scale = 1)
x <-y/sum(y)
x
y <- rgamma(n = 4, shape = c(4, 2, 2, 1), scale = 1)
x <-y/sum(y)
x
y <- rgamma(n = 4, shape = c(15, 2, 2, 0.1), scale = 1)
x <-y/sum(y)
x
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
rgamma(n = length(alpha), shape = alpha, scale = 1)
}
replicate(10, rdir(alpha = c(20, 5, 5, 0.1)))
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
x <- rgamma(n = length(alpha), shape = alpha, scale = 1)
y <- y/sum(y)
}
replicate(10, rdir(alpha = c(20, 5, 5, 0.1)))
rmultinom(n = 4, size = 1, prob = c(0.1, 0.1, 0.1, 0.7))
rmultinom(n = 1, size = 1, prob = c(0.1, 0.1, 0.1, 0.7))
rmultinom(n = 1, size = 4, prob = c(0.1, 0.1, 0.1, 0.7))
rmultinom(n = 1, size = 50, prob = c(0.1, 0.1, 0.1, 0.7))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 0.1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 0.1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 0.1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 0.1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 0.1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 1)))
rdir(c(20, 5, 5, 1))
rdir(c(20, 5, 5, 1))
rdir(c(20, 5, 5, 1)
)
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
x <- rgamma(n = length(alpha), shape = alpha, scale = 1)
y <- y/sum(y)
y
}
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(20, 5, 5, 1)))
pacman::p_load(tidyverse, coloc, extraDistr)
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
x <- rgamma(n = length(alpha), shape = alpha, rate = 1)
y <- y/sum(y)
y
}
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 1)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 0.0001)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 0.0001)))
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
x <- rgamma(n = length(alpha), shape = alpha, rate = 1)
y <- y/sum(y)
y
}
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 0.0001)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 0.0001)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 4.5, 4.5, 0.0001)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 20, 20, 0.0001)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 20, 20, 0.0001)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 20, 20, 0.0001)))
rmultinom(n = 1, size = 50, prob = rdir(c(40, 20, 20, 0.0001)))
rdir(c(40, 20, 20, 0.0001))
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
x <- rgamma(n = length(alpha), shape = alpha, scale = 1)
y <- y/sum(y)
y
}
rmultinom(n = 1, size = 50, prob = rdir(c(40, 20, 20, 0.0001)))
### Prior distribution on hypothesis test parameters is dirichlet distribution
rdir <- function(alpha) {
x <- rgamma(n = length(alpha), shape = alpha, scale = 1)
y <- y/sum(y)
y
}
rdirichlet(n = 4, alpha = c(40, 20, 20, 1))
rdirichlet(n = 4, alpha = c(40, 20, 20, 1))
rdirichlet(n = 1, alpha = c(40, 20, 20, 1))
rdirichlet(n = 1, alpha = c(40, 20, 20, 1))
rdirichlet(n = 1, alpha = c(40, 5, 5, 1))
rdirichlet(n = 1, alpha = c(40, 4.5, 4.5, 1))
rdirichlet(n = 1, alpha = c(45, 2, 2, 1))
rdirichlet(n = 1, alpha = c(45, 2, 2, 0.00001))
rdirichlet(n = 1, alpha = c(45, 2, 2, 0.0001))
rdirichlet(n = 1, alpha = c(45, 2, 2, 0.000))
rdirichlet(n = 1, alpha = c(45, 2, 2, 0.001))
rdirichlet(n = 1, alpha = c(45, 2, 2, 0.01))
rdirichlet(n = 1, alpha = c(45, 2, 2, 0.1))
rdirichlet(n = 1, alpha = c(1000, 10, 10, 1))
ddirichlet(x = rdirichlet(n = 1, alpha = c(1000, 10, 10, 1)), alpha = c(2000, 10, 10, 5))
rdirichlet(n = c(2000, 10, 10, 5))
rdirichlet(n = 1, alpha = c(2000, 10, 10, 5))
rdirichlet(n = 1, alpha = c(2000, 50, 50, 5))
rdirichlet(n = 1, alpha = c(0.99, 0.005, 0.005, 0.00001))
rdirichlet(n = 1, alpha = c(1000, 2, 2, 5))
rdirichlet(n = 1, alpha = c(1000, 2, 2, 5))
0.99^500
0.99^50
(1 - 2e-4 - 1e-8)
(1 - 2e-4 - 1e-8)^50
(1 - 2e-4 - 1e-8)^500
(1 - 2e-4 - 1e-8)^5000
2:1
set.seed(1)
M <- 7
nt <- 2^M + 1 #number of observations
T <- nt - 1 #total time
T_ <- seq(0, T, length.out=nt) #fixed time increments
G_[T] <- rgamma(1, shape=T/nu, scale=nu)
G_[1] <- 0
for (m in 1:M){
for (j in 2:2^(m-1)){
i <- (2*j-1)
Y <- rbeta(1,T/(nu*2^m), T/(nu*2^m))
G_[i*T/2^m] <- G_[(i-1)^T/2^m] + (G_[(i+1)*T/2^m] - G_[(i-1)*T/2^m])*Y
}
}
nu <-  0.1184
set.seed(1)
nu <-  0.1184
M <- 7
nt <- 2^M + 1 #number of observations
T <- nt - 1 #total time
T_ <- seq(0, T, length.out=nt) #fixed time increments
G_[T] <- rgamma(1, shape=T/nu, scale=nu)
T
G_[T]
exp(1)
exp(0)
exp(0.9)
quarto render
